# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import matplotlib.pyplot as plt

import math
from io import StringIO

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QApplication, QLabel, QPushButton, QVBoxLayout, QWidget, QFileDialog, QGridLayout
from PyQt5.QtGui import QPixmap
from PyQt5.QtGui import QCursor

from PyQt5.QtWidgets import * 
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 

from decimal import Decimal
import time
import random

minCalories = 0
maxCalories = 0
minWorkout = 0
maxWorkout = 0
minSleep = 0
maxSleep = 0
days = 0

widgets = {
    "logo": [],
    "button": [],
    "demo": [],

    "goals": [],
    "years": [],
    "calorie": [],
    "work": [],
    "sleep": [],
    "yearsInput": [],
    "workInput": [],
    "calorieInput": [],
    "sleepInput": [],
    "demo2": [],



    "temp":[],

#frame 3 grid
    "Simulation":[],
    "daysGenerated":[],
    "minmaxCal":[],
    "minmaxWork":[],
    "minmaxSleep":[],

    "maxCal":[],
    "maxSleep":[],
    "maxWork":[],
    "daysGenValue":[],

    "minElapsedCalculated":[],
    "maxElapsedCalculated":[],
    "generateElapsed":[],
    "max2ElapsedCalculated":[],
    "backButton":[],

    "backButton2":[],
    "buildHeapButton":[],


#frame4 grid

    "CaloriesTimeElapsed":[],
    "WorkTimeElapsed":[],
    "SleepTimeElapsed":[],

    "AlgorithmUsed":[],


    "Grid1x2":[],
    "Grid2x2":[],
    "Grid3x2":[],

    "Graphify": [],
    "searchLabel": [],
    "caloriesElapsed": [], 
    "workElapsed": [], 
    "sleepElapsed": [], 
    



}




class Ui_Widget(object):
    def setupUi(self, Widget):
        Widget.setObjectName("Widget")
        Widget.resize(100, 400)
        font = QtGui.QFont()
        font.setFamily("Script MT Bold")
        font.setPointSize(24)
        font.setBold(True)
        Widget.setFont(font)
        self.label = QtWidgets.QLabel(Widget)


        self.retranslateUi(Widget)
        QtCore.QMetaObject.connectSlotsByName(Widget)


    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle("LifeTracker AIO")
        self.label.setText(_translate("Widget", "LifeTracker AIO "))

    



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)  #Create the application
    Widget = QtWidgets.QWidget()            #Call to QtWidget
    

    Widget.move(200, 200)
    Widget.setFixedWidth(1000)              #1000 pix
    #Widget.setFixedHeight(500)              #1000 pix
    Widget.setStyleSheet("background: #161219;")

    grid = QGridLayout()



def clear_widgets():
    ''' hide all existing widgets and erase
        them from the global dictionary'''
    for widget in widgets:
        if widgets[widget] != []:
            widgets[widget][-1].hide()
        for i in range(0, len(widgets[widget])):
            widgets[widget].pop()


def show_frame1():
    clear_widgets()
    frame1()


def demo_frame():
    clear_widgets()
    global days
    days = 0
    global sleepArray
    global sortResults
    sleepArray = []
    sortResults = []
    frame2()

def result_frame():
    clear_widgets()
    frame3()

def yolo_frame():

    clear_widgets()
    buildHeap(dataArray,len(dataArray))
    printHeap(dataArray,len(dataArray))
    insertionSort(dataArray)

    insertionSort_BST(dataArray)


    clear_widgets()
    frame4()



def frame1():
    #display logo
    image = QPixmap("logo.png")             #define logo variable
    logo = QLabel()                         #define logo as a Label
    #image = image.scaledToWidth(200)
    #image = image.scaledToHeight(100)
    logo.setPixmap(image)                   #set  logo object to image'

    logo.setAlignment(QtCore.Qt.AlignCenter)
    logo.setStyleSheet("margin-top: 25px;")
    widgets["logo"].append(logo) 


    #Track Button
    button = QPushButton ("TRACK")
    button.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    button.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 45px;" + 
        "font-size: 35px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )

    widgets["button"].append(button) 


    #Demonstrate Button
    demoButton = QPushButton ("DEMONSTRATE")
    demoButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    demoButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 45px;" + 
        "font-size: 35px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    demoButton.clicked.connect(demo_frame)
    widgets["demo"].append(demoButton) 

    grid.addWidget(widgets["logo"][-1],0,0,1,3)                #set grid
    grid.addWidget(widgets["button"][-1], 1, 0,1,3)
    grid.addWidget(widgets["demo"][-1], 2, 0,1,3)


def frame2():
    goalLabel = QLabel("GOALS")
    goalLabel.setAlignment(QtCore.Qt.AlignCenter)
    goalLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
    widgets["goals"].append(goalLabel)

    yearsLabel = QLabel("YEARS")
    yearsLabel.setAlignment(QtCore.Qt.AlignLeft)
    yearsLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["years"].append(yearsLabel)

    calorieLabel = QLabel("CALORIES")
    calorieLabel.setAlignment(QtCore.Qt.AlignLeft)
    calorieLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["calorie"].append(calorieLabel)

    workLabel = QLabel("WORKOUT")
    workLabel.setAlignment(QtCore.Qt.AlignLeft)
    workLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["work"].append(workLabel)

    sleepLabel = QLabel("SLEEP")
    sleepLabel.setAlignment(QtCore.Qt.AlignLeft)
    sleepLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["sleep"].append(sleepLabel)    

    yearsInput = QLineEdit("1")
    yearsInput.setAlignment(QtCore.Qt.AlignCenter)
    yearsInput.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["yearsInput"].append(yearsInput) 

    calorieInput = QLineEdit("2500")
    calorieInput.setAlignment(QtCore.Qt.AlignCenter)
    calorieInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )

    widgets["calorieInput"].append(calorieInput)

    workInput = QLineEdit("60")
    workInput.setAlignment(QtCore.Qt.AlignCenter)
    workInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )

    widgets["workInput"].append(workInput)

    sleepInput = QLineEdit("8")
    sleepInput.setAlignment(QtCore.Qt.AlignCenter)
    sleepInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )

    widgets["sleepInput"].append(sleepInput)    

    tempLabel = QLabel("")
    tempLabel.setAlignment(QtCore.Qt.AlignCenter)
    tempLabel.setStyleSheet(
    "margin: 5px 100px;"
    )

    widgets["temp"].append(tempLabel)

    demoButton2 = QPushButton ("DEMONSTRATE")
    demoButton2.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    demoButton2.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 45px;" + 
        "font-size: 35px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    widgets["demo2"].append(demoButton2)

    #Back Button
    backButton = QPushButton ("Back")
    backButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    backButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    backButton.clicked.connect(show_frame1)
    widgets["backButton"].append(backButton)
    grid.addWidget(widgets["backButton"][-1], 0, 0, 1,1)

    grid.addWidget(widgets["goals"][-1], 0, 1, 1,1)
    grid.addWidget(widgets["years"][-1], 1, 0,1,1)
    grid.addWidget(widgets["yearsInput"][-1], 1, 1,1,1) 
    grid.addWidget(widgets["calorie"][-1], 2, 0,1,1)
    grid.addWidget(widgets["calorieInput"][-1], 2, 1,1,1) 
    grid.addWidget(widgets["work"][-1], 3, 0,1,1)    
    grid.addWidget(widgets["workInput"][-1], 3, 1,1,1) 
    grid.addWidget(widgets["sleep"][-1], 4, 0,1,1)        
    grid.addWidget(widgets["sleepInput"][-1], 4, 1,1,1) 
    grid.addWidget(widgets["demo2"][-1], 5, 1,1,1)     

    grid.addWidget(widgets["temp"][-1], 1, 2,1,1) 

    #yearsString = yearsInput.text() 

    def calculate():

        years = int(yearsInput.text())
        calories = Decimal(calorieInput.text())
        workout = Decimal(workInput.text())
        sleep = Decimal(sleepInput.text())

        class Person(object):

            years = int(yearsInput.text())
            calories = Decimal(calorieInput.text())
            workout = Decimal(workInput.text())
            sleep = Decimal(sleepInput.text())

            def __init__(self, years, calories, workout, sleep):
                self.years = years
                self.calories = calories
                self.workout = workout
                self.sleep = sleep


        global days
        days  = years * 365      
        global dataArray
        dataArray = [] 


        user = Person(0,0,0,0)
        start = time.time()
        for x in range(days):
           dataArray.append(Person(x,0,0,0))

        index = 0
        for x in dataArray:
            dataArray[index].calories = random.randint(calories - 200, calories + 200)
            dataArray[index].workout = random.randint(workout - 15, workout + 15)
            dataArray[index].sleep = random.randint(sleep - 2, sleep + 2)
            index = index + 1
        end = time.time()

        global generateElapsed
        generateElapsed = ( round(end, 5) - round(start, 5) ) 
        generateElapsed = "{:.5f}".format(generateElapsed)





#Find minimums 

        index = 0

        global minElapsed
        global minCalories 
        global minWorkout 
        global minSleep 

        minCalories = dataArray[index].calories
        minWorkout = dataArray[index].workout
        minSleep = dataArray[index].sleep
        start = time.time()
        for x in dataArray:
            
            tempCalories = dataArray[index].calories
            tempWorkout = dataArray[index].workout
            tempSleep = dataArray[index].sleep

            if tempCalories < minCalories:
                minCalories = tempCalories
            if tempWorkout < minWorkout:
                minWorkout = tempWorkout
            if tempSleep < minSleep:
                minSleep = tempSleep
            index = index + 1 
        end = time.time()
        minElapsed = end - start
        minElapsed = ( round(end, 5) - round(start, 5) ) 
        minElapsed = "{:.5f}".format(minElapsed)




        index = 0
        global maxElapsed
        global maxCalories 
        global maxWorkout 
        global maxSleep 

#Find maximums 
        for x in dataArray:
            
            tempCalories = dataArray[index].calories
            tempWorkout = dataArray[index].workout
            tempSleep = dataArray[index].sleep

            if tempCalories > maxCalories:
                maxCalories = tempCalories
            if tempWorkout > maxWorkout:
                maxWorkout = tempWorkout
            if tempSleep > maxSleep:
                maxSleep = tempSleep
            index = index + 1 

        maxElapsed = end - start
        maxElapsed = ( round(end, 5) - round(start, 5) ) 
        maxElapsed = "{:.5f}".format(maxElapsed)

        clear_widgets()
        result_frame()
    demoButton2.clicked.connect(calculate)

def searchFrame():

    clear_widgets()
    searchLabel = QLabel("SEARCH")
    searchLabel.setAlignment(QtCore.Qt.AlignCenter)
    searchLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
    widgets["searchLabel"].append(searchLabel)


    calorieLabel = QLabel("CALORIE")
    calorieLabel.setAlignment(QtCore.Qt.AlignLeft)
    calorieLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["calorie"].append(calorieLabel)

    workLabel = QLabel("WORKOUT")
    workLabel.setAlignment(QtCore.Qt.AlignLeft)
    workLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["work"].append(workLabel)

    sleepLabel = QLabel("SLEEP")
    sleepLabel.setAlignment(QtCore.Qt.AlignLeft)
    sleepLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["sleep"].append(sleepLabel)    


    calorieInput = QLineEdit("2500")
    calorieInput.setAlignment(QtCore.Qt.AlignCenter)
    calorieInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )

    widgets["calorieInput"].append(calorieInput)

    workInput = QLineEdit("60")
    workInput.setAlignment(QtCore.Qt.AlignCenter)
    workInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )

    widgets["workInput"].append(workInput)

    sleepInput = QLineEdit("8")
    sleepInput.setAlignment(QtCore.Qt.AlignCenter)
    sleepInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )


    caloriesElapsed = QLabel()
    caloriesElapsed.setText(str(binarySearchTime) + " seconds")
    caloriesElapsed.setAlignment(QtCore.Qt.AlignLeft)
    caloriesElapsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    workElapsed = QLabel()
    workElapsed.setText(str(linearSearchTime) + " seconds")
    workElapsed.setAlignment(QtCore.Qt.AlignLeft)
    workElapsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    sleepElapsed = QLabel()
    sleepElapsed.setText(str(BinaryTreeTime) + " seconds")
    sleepElapsed.setAlignment(QtCore.Qt.AlignLeft)
    sleepElapsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["caloriesElapsed"].append(caloriesElapsed)  
    widgets["workElapsed"].append(workElapsed)  
    widgets["sleepElapsed"].append(sleepElapsed)  

    widgets["sleepInput"].append(sleepInput)    

    tempLabel = QLabel("")
    tempLabel.setAlignment(QtCore.Qt.AlignCenter)
    tempLabel.setStyleSheet(
    "margin: 5px 100px;"
    )

    widgets["temp"].append(tempLabel)

    demoButton2 = QPushButton ("SEARCH")
    demoButton2.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    demoButton2.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 45px;" + 
        "font-size: 35px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    widgets["demo2"].append(demoButton2)

    #Back Button
    backButton = QPushButton ("Back")
    backButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    backButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    backButton.clicked.connect(frame4)
    widgets["backButton"].append(backButton)
    grid.addWidget(widgets["backButton"][-1], 0, 0, 1,1)

    grid.addWidget(widgets["searchLabel"][-1], 0, 1, 1,1)
    grid.addWidget(widgets["calorie"][-1], 1, 0,1,1)
    grid.addWidget(widgets["calorieInput"][-1], 1, 1,1,1) 
    grid.addWidget(widgets["work"][-1], 2, 0,1,1)    
    grid.addWidget(widgets["workInput"][-1], 2, 1,1,1) 
    grid.addWidget(widgets["sleep"][-1], 3, 0,1,1)        
    grid.addWidget(widgets["sleepInput"][-1], 3, 1,1,1) 
    grid.addWidget(widgets["demo2"][-1], 5, 1,1,1)     

    grid.addWidget(widgets["temp"][-1], 1, 2,1,1) 

    def initSearch():
        global binarySearchTime
        global linearSearchTime
        global BinaryTreeTime
        start0 = time.time()
        calories = Decimal(calorieInput.text())
        binary_search(dataArray,calories)
        end0 = time.time()
        binarySearchTime = end0 - start0;
        start1 = time.time()
        workout = Decimal(workInput.text())
        linearSearch(dataArray,workout)
        end1 = time.time()
        linearSearchTime = end1 - start1
        start2 = time.time()
        sleep = Decimal(sleepInput.text())
        preOrder(bstROOT,sleep)
        end2 = time.time()
        BinaryTreeTime = end2 - start2

        binarySearchTime = "{:.15f}".format(binarySearchTime)
        linearSearchTime = "{:.15f}".format(linearSearchTime)
        BinaryTreeTime = "{:.15f}".format(BinaryTreeTime)
        print(binarySearchTime)
        print(linearSearchTime)
        print(BinaryTreeTime)

        grid.addWidget(widgets["caloriesElapsed"]     [-1], 1, 2,2,1)
        grid.addWidget(widgets["workElapsed"]     [-1], 2, 2,2,1)
        grid.addWidget(widgets["sleepElapsed"]     [-1], 3, 2,2,1)
   # bstValue = BSTsearch(bstROOT,sleep)
    #linearSearch
    #BSTsearch


    demoButton2.clicked.connect(initSearch)

def frame4():
    clear_widgets()

    daysLabel = QLabel("Days Generated: ")
    daysLabel.setAlignment(QtCore.Qt.AlignLeft)
    daysLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
#Heapified  Calories
    minmaxCalLabel = QLabel("Calories Heapified:")
    minmaxCalLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxCalLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

#InsertionSort
    minmaxWorkLabel = QLabel("Workouts Sorted:")
    minmaxWorkLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxWorkLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
#Binary Search Tree 
    minmaxSleepLabel = QLabel("Sleep into BST:")
    minmaxSleepLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxSleepLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    AlgorithmUsed = QLabel("Algorithm")
    AlgorithmUsed.setAlignment(QtCore.Qt.AlignCenter)
    AlgorithmUsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
#/////////////////////////////#
    daysLabelValue = QLabel()
    daysLabelValue.setText(str(days))
    daysLabelValue.setAlignment(QtCore.Qt.AlignLeft)
    daysLabelValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )


    widgets["minmaxCal"].append(minmaxCalLabel)
    widgets["minmaxWork"].append(minmaxWorkLabel)
    widgets["minmaxSleep"].append(minmaxSleepLabel)
    widgets["AlgorithmUsed"].append(AlgorithmUsed)

    grid.addWidget(widgets["AlgorithmUsed"][-1], 0, 2, 1,1)

    HeapSortLabel = QLabel("Heap Sort")
    HeapSortLabel.setAlignment(QtCore.Qt.AlignLeft)
    HeapSortLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    InsertionSortLabel = QLabel("Insertion Sort")
    InsertionSortLabel.setAlignment(QtCore.Qt.AlignLeft)
    InsertionSortLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    BSTLabel = QLabel("Sorted Array to BST")
    BSTLabel.setAlignment(QtCore.Qt.AlignLeft)
    BSTLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    widgets["Grid1x2"].append(HeapSortLabel)
    widgets["Grid2x2"].append(InsertionSortLabel)
    widgets["Grid3x2"].append(BSTLabel)

    grid.addWidget(widgets["Grid1x2"][-1], 1, 2, 1,1)
    grid.addWidget(widgets["Grid2x2"][-1], 2, 2, 1,1)
    grid.addWidget(widgets["Grid3x2"][-1], 3, 2, 1,1)


    
#/////////////////////////////#

    CaloriesTimeElapsed = QLabel()
    CaloriesTimeElapsed.setText(str(heapifyTime))
    CaloriesTimeElapsed.setAlignment(QtCore.Qt.AlignLeft)
    CaloriesTimeElapsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    WorkTimeElapsed = QLabel()
    WorkTimeElapsed.setText(str(insertionSortTime))
    WorkTimeElapsed.setAlignment(QtCore.Qt.AlignLeft)
    WorkTimeElapsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    SleepTimeElapsed = QLabel()
    SleepTimeElapsed.setText(str(BSTTime))
    SleepTimeElapsed.setAlignment(QtCore.Qt.AlignLeft)
    SleepTimeElapsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    ElapsedTime = QLabel("Elapsed Time ")
    ElapsedTime.setAlignment(QtCore.Qt.AlignCenter)
    ElapsedTime.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
    widgets["temp"].append(ElapsedTime)
    grid.addWidget(widgets["temp"][-1], 0, 1, 1,1)

    widgets["daysGenerated"].append(daysLabel)
    widgets["CaloriesTimeElapsed"].append(CaloriesTimeElapsed)
    widgets["WorkTimeElapsed"].append(WorkTimeElapsed)
    widgets["SleepTimeElapsed"].append(SleepTimeElapsed)

    #Back Button
    backButton = QPushButton ("Back")
    backButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    backButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    backButton.clicked.connect(demo_frame)

    widgets["backButton"].append(backButton)
    grid.addWidget(widgets["backButton"][-1], 0, 0, 1,1)

    buildHeapButton = QPushButton ("YOLO SEARCH")   
    buildHeapButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    buildHeapButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    buildHeapButton.clicked.connect(searchFrame)

    widgets["buildHeapButton"].append(buildHeapButton)
    grid.addWidget(widgets["buildHeapButton"][-1], 5, 1, 1,1)

    grid.addWidget(widgets["minmaxCal"][-1], 1, 0,1,1)
    grid.addWidget(widgets["minmaxWork"][-1], 2, 0,1,1)    
    grid.addWidget(widgets["minmaxSleep"][-1], 3, 0,1,1)    

    grid.addWidget(widgets["CaloriesTimeElapsed"]     [-1], 1, 1,1,1)
    grid.addWidget(widgets["WorkTimeElapsed"]     [-1], 2, 1,1,1)
    grid.addWidget(widgets["SleepTimeElapsed"]     [-1], 3, 1,1,1)


    Graphify = QPushButton ("SHOW GRAPH")   
    Graphify.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    Graphify.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    Graphify.clicked.connect(sortChart)
    widgets["Graphify"].append(Graphify)
    grid.addWidget(widgets["Graphify"][-1], 5, 0, 1,1)






def frame3():

    simulationLabel = QLabel("Simulation Results")
    simulationLabel.setAlignment(QtCore.Qt.AlignCenter)
    simulationLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )


    daysLabel = QLabel("Days Generated: ")
    daysLabel.setAlignment(QtCore.Qt.AlignLeft)
    daysLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    minmaxCalLabel = QLabel("Min and Max Calories:")
    minmaxCalLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxCalLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    minmaxWorkLabel = QLabel("Min and Max Workouts:")
    minmaxWorkLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxWorkLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
    minmaxSleepLabel = QLabel("Min and Max Sleep:")
    minmaxSleepLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxSleepLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

#/////////////////////////////#
    daysLabelValue = QLabel()
    daysLabelValue.setText(str(days))
    daysLabelValue.setAlignment(QtCore.Qt.AlignLeft)
    daysLabelValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    bothCalories = str(minCalories) + " and " + str(maxCalories) + " Calories"

    minmaxCalValue = QLabel()
    minmaxCalValue.setText(bothCalories)
    minmaxCalValue.setAlignment(QtCore.Qt.AlignLeft)
    minmaxCalValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    bothWork = str(minWorkout) + " and " + str(maxWorkout) + " Minutes"

    minmaxWorkValue = QLabel()
    minmaxWorkValue.setText(bothWork)
    minmaxWorkValue.setAlignment(QtCore.Qt.AlignLeft)
    minmaxWorkValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    bothSleep = str(minSleep) + " and " + str(maxSleep) + " Hours"

    minmaxSleepValue = QLabel()
    minmaxSleepValue.setText(str(bothSleep))
    minmaxSleepValue.setAlignment(QtCore.Qt.AlignLeft)
    minmaxSleepValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    
#/////////////////////////////#

    daysElapsed = QLabel()
    daysElapsed.setText(str(generateElapsed) + " seconds")
    daysElapsed.setAlignment(QtCore.Qt.AlignLeft)
    daysElapsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    minElapsedCalculated = QLabel()
    minElapsedCalculated.setText(str(str(minElapsed) + " seconds"))
    minElapsedCalculated.setAlignment(QtCore.Qt.AlignLeft)
    minElapsedCalculated.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    maxElapsedCalculated = QLabel()
    maxElapsedCalculated.setText(str(str(minElapsed) + " seconds"))
    maxElapsedCalculated.setAlignment(QtCore.Qt.AlignLeft)
    maxElapsedCalculated.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    max2ElapsedCalculated = QLabel()
    max2ElapsedCalculated.setText(str(str(minElapsed) + " seconds"))
    max2ElapsedCalculated.setAlignment(QtCore.Qt.AlignLeft)
    max2ElapsedCalculated.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    ElapsedTime = QLabel("Elapsed Time ")
    ElapsedTime.setAlignment(QtCore.Qt.AlignCenter)
    ElapsedTime.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
    widgets["temp"].append(ElapsedTime)
    grid.addWidget(widgets["temp"][-1], 0, 2, 1,1)


    #Back Button
    backButton = QPushButton ("Back")
    backButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    backButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    backButton.clicked.connect(demo_frame)

    widgets["backButton"].append(backButton)
    grid.addWidget(widgets["backButton"][-1], 0, 0, 1,1)

    buildHeapButton = QPushButton ("YOLO SORT")
    buildHeapButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    buildHeapButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    buildHeapButton.clicked.connect(yolo_frame)

    widgets["buildHeapButton"].append(buildHeapButton)
    grid.addWidget(widgets["buildHeapButton"][-1], 5, 0, 1,1)

    widgets["Simulation"].append(simulationLabel)
    widgets["daysGenerated"].append(daysLabel)
    widgets["minmaxCal"].append(minmaxCalLabel)
    widgets["minmaxWork"].append(minmaxWorkLabel)
    widgets["minmaxSleep"].append(minmaxSleepLabel)

    widgets["daysGenValue"].append(daysLabelValue)
    widgets["maxCal"].append(minmaxCalValue)
    widgets["maxSleep"].append(minmaxSleepValue)
    widgets["maxWork"].append(minmaxWorkValue)

    widgets["generateElapsed"].append(daysElapsed)
    widgets["minElapsedCalculated"].append(minElapsedCalculated)
    widgets["maxElapsedCalculated"].append(maxElapsedCalculated)
    widgets["max2ElapsedCalculated"].append(max2ElapsedCalculated)


    grid.addWidget(widgets["Simulation"][-1], 0, 1, 1,1)
    grid.addWidget(widgets["daysGenerated"][-1], 1, 0,1,2)
    grid.addWidget(widgets["minmaxCal"][-1], 2, 0,1,1)
    grid.addWidget(widgets["minmaxWork"][-1], 3, 0,1,1)    
    grid.addWidget(widgets["minmaxSleep"][-1], 4, 0,1,1)    

    grid.addWidget(widgets["daysGenValue"][-1], 1, 1,1,1)
    grid.addWidget(widgets["maxCal"][-1], 2, 1,1,1)
    grid.addWidget(widgets["maxWork"][-1], 3, 1,1,1)  
    grid.addWidget(widgets["maxSleep"][-1], 4, 1,1,1) 

    grid.addWidget(widgets["generateElapsed"]     [-1], 1, 2,1,1)
    grid.addWidget(widgets["maxElapsedCalculated"]     [-1], 2, 2,1,1)
    grid.addWidget(widgets["minElapsedCalculated"]     [-1], 3, 2,1,1)
    grid.addWidget(widgets["max2ElapsedCalculated"]     [-1], 4, 2,1,1)


#////////////////////////////////////////////////////////#

def heapify(arr, n, i):
 
    largest = i  # Initialize largest as root
    l = 2 * i + 1  # left = 2*i + 1
    r = 2 * i + 2  # right = 2*i + 2

    # If left child is larger than root
    if l < n and arr[l].calories > arr[largest].calories:
        largest = l
 
    # If right child is larger than largest so far
    if r < n and arr[r].calories > arr[largest].calories:
        largest = r
 
    # If largest is not root
    if largest != i:
        arr[i].calories, arr[largest].calories = arr[largest].calories, arr[i].calories
 
        # Recursively heapify the affected sub-tree
        heapify(arr, n, largest)
 
# Function to build a Max-Heap from the given array
 
 
def buildHeap(arr, n):
    # Index of last non-leaf node
    startIdx = n // 2 - 1
    global heapifyTime
    global sortResults
    # Perform reverse level order traversal
    # from last non-leaf node and heapify
    # each node
    start = time.time()
    for i in range(startIdx, -1, -1):
        heapify(arr, n, i)
    end = time.time()
    heapifyTime = end - start; 
    sortResults.append(heapifyTime)
    # A utility function to print the array
    # representation of Heap
 
 
def printHeap(arr, n):
    print("Array representation of Heap is:")
 
    for i in range(n):
        print(arr[i].calories, end=" ")
    print()

#///////////////////////////////////////////////////////#

def insertionSort(dataArray):
    global insertionSortTime
    global sortResults
    start = time.time()
    # Traverse through 1 to len(arr)
    for i in range(1, len(dataArray)):
  
        key = dataArray[i].workout
  
        # Move elements of arr[0..i-1], that are
        # greater than key, to one position ahead
        # of their current position
        j = i-1
        while j >=0 and key < dataArray[j].workout :
                dataArray[j+1].workout = dataArray[j].workout
                j -= 1
        dataArray[j+1].workout = key
    end = time.time()
    insertionSortTime = end - start;
    sortResults.append(insertionSortTime)
    print(insertionSortTime)

def insertionSort_BST(dataArray):
    dataArray.sort(key=lambda sleep: sleep.sleep, reverse = True)
    for i in range(1, len(dataArray)):
  
        key = dataArray[i].sleep
  
        # Move elements of arr[0..i-1], that are
        # greater than key, to one position ahead
        # of their current position
        j = i-1
        while j >=0 and key < dataArray[j].sleep :
                dataArray[j+1].sleep = dataArray[j].sleep
                j -= 1
        dataArray[j+1].sleep = key

    tempprint(dataArray)
    global BSTTime
    global sortResults
    #sleepArray = [None] *len(dataArray)
    print(len(sleepArray))
    start = time.time()
    global bstROOT
    bstROOT = sortedArrayToBST(sleepArray)
    end = time.time();
    BSTTime = end - start;
    sortResults.append(BSTTime)


#ut.sort(key=lambda x: x.count, reverse=True)

sleepArray = []

def tempprint(dataArray):
    global sleepArray
    for i in range(0,len(dataArray)):
        sleepArray.append(dataArray[i].sleep)


class Node:
    def __init__(self, d):
        self.data = d
        self.left = None
        self.right = None
 
# function to convert sorted array to a
# balanced BST
# input : sorted array of integers
# output: root node of balanced BST

# A binary tree node
class Node:
 
    # Constructor to create a new node
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None

bstROOT = 0;
def sortedArrayToBST(sleepArray):
    if not sleepArray:
        return None
 
    # find middle
    mid = (len(sleepArray)) / 2
    mid = int(mid)
    # make the middle element the root
    root = Node(sleepArray[mid])
     
    # left subtree of root has all
    # values <arr[mid]
    root.left = sortedArrayToBST(sleepArray[:mid])
     
    # right subtree of root has all
    # values >arr[mid]
    root.right = sortedArrayToBST(sleepArray[mid+1:])
    return root

sortResults = []

def sortChart():
    fig = plt.figure()
    ax = fig.add_axes([0,0,1,1])
    global sortResults
    print (sortResults)
    sortAlgorithm = ['Heap Sort', 'Insertion Sort', 'Binary Sort']
    ax.bar(sortAlgorithm,sortResults)
    plt.show()

# A utility function to print the preorderb
# traversal of the BST
def preOrder(node, key):
    if not node:
        return
    if (node.data == key):
        print("Key found")
        return
    print(node.data),
    preOrder(node.left,key)
    preOrder(node.right,key)




insertionSortTime = 0;
heapifyTime = 0; 
BSTTime = 0;


binarySearchTime = 0;
linearSearchTime = 0;
BinaryTreeTime = 0;

def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0

    while low <= high:
 
        mid = (high + low) // 2
 
        # If x is greater, ignore left half
        if arr[mid].calories < x:
            low = mid + 1
 
        # If x is smaller, ignore right half
        elif arr[mid].calories > x:
            high = mid - 1
 
        # means x is present at mid
        else:
            return mid
    
    # If we reach here, then the element was not present
    return -1


def linearSearch(arr, x):
    for i in range(len(arr)):
        if arr[i].workout == x:
            return i
    return -1

def BSTsearch(root,key):
     
    # Base Cases: root is null or key is present at root
    if root is None or root.val == key:
        return root
 
    # Key is greater than root's key
    if root.val < key:
        return search(root.right,key)
   
    # Key is smaller than root's key
    return search(root.left,key)



frame1()
ui = Ui_Widget()                        #Util
ui.setupUi(Widget)                      #Util
Widget.show()                           #Util



Widget.setLayout(grid)
sys.exit(app.exec_())                   #exit

